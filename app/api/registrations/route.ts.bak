import { NextRequest, NextResponse } from "next/server";
import { db } from "@/lib/db";
import { requireAuth, requireRole } from "@/lib/jwt-middleware";

// POST /api/registrations - Public endpoint for registration
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    const {
      fullName,
      email,
      phone,
      dateOfBirth,
      address,
      gender,
      nik,
      occupation,
      isBeneficiary,
      beneficiaryProgramId,
      notes,
    } = body;

    // Validasi required fields
    if (!fullName || !email || !phone) {
      return NextResponse.json(
        { error: "Nama, email, dan nomor telepon wajib diisi" },
        { status: 400 }
      );
    }

    // Validasi email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: "Format email tidak valid" },
        { status: 400 }
      );
    }

    // Cek apakah email/phone sudah terdaftar
    const existingRegistration = await db.registration.findFirst({
      where: {
        OR: [{ email }, { phone }],
        deletedAt: null,
      },
    });

    if (existingRegistration) {
      return NextResponse.json(
        { error: "Email atau nomor telepon sudah terdaftar" },
        { status: 400 }
      );
    }

    // Validasi jika penerima manfaat
    if (isBeneficiary && !beneficiaryProgramId) {
      return NextResponse.json(
        { error: "Silakan pilih program yang Anda terima" },
        { status: 400 }
      );
    }

    // Create registration
    const registration = await db.registration.create({
      data: {
        fullName,
        email,
        phone,
        dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : null,
        address: address || null,
        gender: gender || null,
        nik: nik || null,
        occupation: occupation || null,
        isBeneficiary: Boolean(isBeneficiary),
        beneficiaryProgramId: beneficiaryProgramId
          ? parseInt(beneficiaryProgramId)
          : null,
        notes: notes || null,
        status: "pending",
      },
      include: {
        beneficiaryProgram: {
          select: {
            id: true,
            title: true,
          },
        },
      },
    });

    return NextResponse.json(
      {
        message: "Pendaftaran berhasil dikirim",
        registration: {
          id: registration.id,
          fullName: registration.fullName,
          email: registration.email,
          status: registration.status,
        },
      },
      { status: 201 }
    );
  } catch (error: any) {
    console.error("Registration error:", error);
    return NextResponse.json(
      { error: "Terjadi kesalahan saat memproses pendaftaran" },
      { status: 500 }
    );
  }
}

// GET /api/registrations - For admin to view all registrations
export async function GET(req: NextRequest) {
  const authError = requireAuth(req);
  if (authError) return authError;

  const roleError = requireRole(req, ["superadmin", "editor"]);
  if (roleError) return roleError;

  try {
    const { searchParams } = new URL(req.url);
    const page = parseInt(searchParams.get("page") || "1");
    const limit = parseInt(searchParams.get("limit") || "10");
    const status = searchParams.get("status");
    const isBeneficiary = searchParams.get("isBeneficiary");
    const search = searchParams.get("search");

    const skip = (page - 1) * limit;

    // Build where clause
    const where: any = {
      deletedAt: null,
    };

    if (status) {
      where.status = status;
    }

    if (isBeneficiary === "true") {
      where.isBeneficiary = true;
    } else if (isBeneficiary === "false") {
      where.isBeneficiary = false;
    }

    if (search) {
      where.OR = [
        { fullName: { contains: search, mode: "insensitive" } },
        { email: { contains: search, mode: "insensitive" } },
        { phone: { contains: search, mode: "insensitive" } },
      ];
    }

    const [registrations, total] = await Promise.all([
      db.registration.findMany({
        where,
        skip,
        take: limit,
        orderBy: { registeredAt: "desc" },
        include: {
          beneficiaryProgram: {
            select: {
              id: true,
              title: true,
            },
          },
          member: {
            select: {
              id: true,
              fullName: true,
              status: true,
            },
          },
        },
      }),
      db.registration.count({ where }),
    ]);

    return NextResponse.json({
      registrations,
      pagination: {
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit),
      },
    });
  } catch (error: any) {
    console.error("Get registrations error:", error);
    return NextResponse.json(
      { error: "Gagal mengambil data pendaftaran" },
      { status: 500 }
    );
  }
}
