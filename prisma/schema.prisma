generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------
// Enums
// ---------------------------
enum UserRole {
  superadmin
  editor
  analyst
}

enum OrgLevel {
  dpd
  sayap
  dpc
  dprt
  kader
}

enum MemberStatus {
  active
  inactive
  suspended
}

enum PositionEnum {
  ketua
  sekretaris
  bendahara
  wakil
  anggota
}

enum RegionType {
  kabupaten
  kecamatan
  desa
}

enum GenderEnum {
  male
  female
}

enum ElectionType {
  dprd
}

// ---------------------------
// Core CMS
// ---------------------------
model User {
  id        Int      @id @default(autoincrement())
  username  String   @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @db.Timestamptz

  // Relations
  news      News[]
  programs  Program[]
  galleries Gallery[]
  members   Member[]

  @@index([username])
  @@index([role])
  @@index([deletedAt])
}

model Party {
  id           Int     @id @default(autoincrement())
  name         String  @unique @db.VarChar(100)
  abbreviation String? @unique @db.VarChar(20)
  logoUrl      String? @db.VarChar(255)

  // Relations
  caleg            Caleg[]
  dprdPartyResults DprdPartyResult[]

  @@index([name])
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  subtitle    String? @db.VarChar(255)
  description String?
  iconUrl     String? @db.VarChar(255)

  // Relations
  programs Program[]
}

model News {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  content      String?
  publishDate  DateTime?
  thumbnailUrl String?   @db.VarChar(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? @db.Timestamptz

  // Author
  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([publishDate])
  @@index([userId])
  @@index([deletedAt])
}

model Program {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String?
  startDate   DateTime?
  endDate     DateTime?
  photoUrl    String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? @db.Timestamptz

  // Relations
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([categoryId])
  @@index([userId])
  @@index([startDate])
  @@index([deletedAt])
}

model Gallery {
  id         Int       @id @default(autoincrement())
  type       String?   @db.VarChar(50) // foto/video
  url        String    @db.VarChar(255)
  caption    String?
  uploadDate DateTime? @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? @db.Timestamptz

  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
  @@index([uploadDate])
  @@index([deletedAt])
}

// ---------------------------
// Struktur Organisasi & Sayap
// ---------------------------
model SayapType {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String?

  strukturOrganisasi StrukturOrganisasi[]
}

model Region {
  id   Int        @id @default(autoincrement())
  name String     @db.VarChar(100)
  type RegionType

  strukturOrganisasi StrukturOrganisasi[]

  // Opsional: unique (type, name) jika nama tidak duplikat per tipe
  @@unique([type, name])
  @@index([type])
  @@index([name])
}

model StrukturOrganisasi {
  id       Int          @id @default(autoincrement())
  level    OrgLevel
  position PositionEnum
  photoUrl String?      @db.VarChar(255)

  // Optional relasi
  sayapTypeId Int?
  sayapType   SayapType? @relation(fields: [sayapTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  regionId Int?
  region   Region? @relation(fields: [regionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  members Member[]

  @@index([level])
  @@index([position])
  @@index([regionId])
  @@index([sayapTypeId])
}

// ---------------------------
// Keanggotaan
// ---------------------------
model Member {
  id          Int           @id @default(autoincrement())
  fullName    String        @db.VarChar(150)
  email       String?       @db.VarChar(100)
  phone       String?       @db.VarChar(30)
  dateOfBirth DateTime?
  address     String?
  bio         String?
  gender      GenderEnum?
  status      MemberStatus? @default(active)
  photoUrl    String?       @db.VarChar(255)
  joinDate    DateTime?     @default(now())
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?     @db.Timestamptz

  // Optional link ke CMS user
  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Struktur organisasi
  strukturId Int?
  struktur   StrukturOrganisasi? @relation(fields: [strukturId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([status])
  @@index([userId])
  @@index([strukturId])
  @@index([fullName])
  @@index([deletedAt])
}

// ---------------------------
// Entity Pemilu DPRD
// ---------------------------
model Caleg {
  id       Int     @id @default(autoincrement())
  fullName String  @db.VarChar(150)
  photoUrl String? @db.VarChar(255)

  partyId Int
  party   Party @relation(fields: [partyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  dprdCalegResults DprdCalegResult[]

  // Cegah duplikasi nama dalam satu partai
  @@unique([partyId, fullName])
  @@index([partyId])
  @@index([fullName])
}

model Dapil {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  kecamatan            Kecamatan[]
  DprdElectionAnalysis DprdElectionAnalysis[]

  @@unique([name])
}

model Kecamatan {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  dapilId Int
  dapil   Dapil @relation(fields: [dapilId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  desa     Desa[]
  analyses DprdElectionAnalysis[]

  // Nama kecamatan unik dalam satu dapil
  @@unique([dapilId, name])
  @@index([dapilId])
  @@index([name])
}

model Desa {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  kecamatanId Int
  kecamatan   Kecamatan @relation(fields: [kecamatanId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  tps      Tps[]
  analyses DprdElectionAnalysis[]

  // Nama desa unik dalam satu kecamatan
  @@unique([kecamatanId, name])
  @@index([kecamatanId])
  @@index([name])
}

model Tps {
  id     Int    @id @default(autoincrement())
  number String @db.VarChar(20)

  desaId Int
  desa   Desa @relation(fields: [desaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  analyses DprdElectionAnalysis[]

  // Nomor TPS unik per desa
  @@unique([desaId, number])
  @@index([desaId])
  @@index([number])
}

// ---------------------------
// Analisis & Hasil DPRD
// ---------------------------
model DprdElectionAnalysis {
  id              Int      @id @default(autoincrement())
  year            Int
  totalValidVotes Int?
  invalidVotes    Int?
  dpt             Int?
  dptb            Int?
  dpk             Int?
  totalVotes      Int?
  turnoutPercent  Decimal? @db.Decimal(5, 2)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Hirarki wilayah (opsional per level, tapi minimal tpsId umumnya terisi)
  dapilId Int?
  dapil   Dapil? @relation(fields: [dapilId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  kecamatanId Int?
  kecamatan   Kecamatan? @relation(fields: [kecamatanId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  desaId Int?
  desa   Desa? @relation(fields: [desaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  tpsId Int?
  tps   Tps? @relation(fields: [tpsId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Relations
  partyResults DprdPartyResult[]
  calegResults DprdCalegResult[]

  // Satu TPS per tahun sebaiknya unik
  @@unique([year, tpsId])
  @@index([year])
  @@index([dapilId])
  @@index([kecamatanId])
  @@index([desaId])
  @@index([tpsId])
}

model DprdPartyResult {
  id    Int  @id @default(autoincrement())
  votes Int?

  electionAnalysisId Int
  electionAnalysis   DprdElectionAnalysis @relation(fields: [electionAnalysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  partyId Int
  party   Party @relation(fields: [partyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Cegah duplikasi baris partai pada satu analisis
  @@unique([electionAnalysisId, partyId])
  @@index([electionAnalysisId])
  @@index([partyId])
}

model DprdCalegResult {
  id    Int  @id @default(autoincrement())
  votes Int?

  electionAnalysisId Int
  electionAnalysis   DprdElectionAnalysis @relation(fields: [electionAnalysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  calegId Int
  caleg   Caleg @relation(fields: [calegId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Cegah duplikasi baris caleg pada satu analisis
  @@unique([electionAnalysisId, calegId])
  @@index([electionAnalysisId])
  @@index([calegId])
}
