generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------
// Enums
// ---------------------------
enum UserRole {
  superadmin
  editor
  analyst
}

enum OrgLevel {
  dpd
  sayap
  dpc
  dprt
  kader
}

enum MemberStatus {
  active
  inactive
  suspended
}

enum PositionEnum {
  ketua
  sekretaris
  bendahara
  wakil
  anggota
}

enum RegionType {
  kabupaten
  kecamatan
  desa
}

enum GenderEnum {
  male
  female
}

enum ElectionType {
  dprd
}

enum ApplicationType {
  nasdem_muda
  member
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

enum ProgramStatus {
  pending
  completed
  ongoing
  planning
}

enum MemberBenefitStatus {
  pending
  completed
}

// ---------------------------
// Core CMS
// ---------------------------
model User {
  id        Int       @id @default(autoincrement())
  username  String    @db.VarChar(50)
  email     String    @unique @db.VarChar(100)
  password  String    @db.VarChar(255)
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz

  // Relations
  news News[]

  @@index([username])
  @@index([role])
  @@index([deletedAt])
}

model Party {
  id           Int     @id @default(autoincrement())
  name         String  @unique @db.VarChar(100)
  abbreviation String? @unique @db.VarChar(20)
  logoUrl      String? @db.VarChar(255)

  // Relations
  caleg            Caleg[]
  dprdPartyResults DprdPartyResult[]

  @@index([name])
}

model News {
  id           Int       @id @default(autoincrement())
  title        String    @db.VarChar(255)
  content      String?
  publishDate  DateTime?
  thumbnailUrl String?   @db.VarChar(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? @db.Timestamptz

  // Author
  userId Int?
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([publishDate])
  @@index([userId])
  @@index([deletedAt])
}

model CmsHeroBanner {
  id        Int      @id @default(autoincrement())
  imageUrl  String   @db.VarChar(255)
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CmsAbout {
  id       Int     @id @default(autoincrement())
  vision   String? @db.Text
  mission  String? @db.Text
  videoUrl String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CmsContact {
  id               Int     @id @default(autoincrement())
  phone            String? @db.VarChar(30)
  email            String? @db.VarChar(100)
  address          String? @db.VarChar(255)
  operationalHours String? @db.VarChar(150)

  instagramUrl String? @db.VarChar(255)
  facebookUrl  String? @db.VarChar(255)
  twitterUrl   String? @db.VarChar(255)
  youtubeUrl   String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Program {
  id            Int           @id @default(autoincrement())
  category      String
  name          String
  description   String?
  target        Int
  currentTarget Int
  budget        Decimal
  status        ProgramStatus
  startDate     DateTime?
  endDate       DateTime?
  photoUrl      String?       @db.VarChar(255)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?     @db.Timestamptz

  coordinatorId Int
  coordinator   Member @relation(fields: [coordinatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Penerima benefit (bukan member)
  recipients       ProgramBenefitRecipient[]
  // Pendaftar PIP
  pipRegistrations PipRegistration[]
  // Pendaftar KIP
  kipRegistrations KipRegistration[]
  // Membership applications with beneficiary program
  membershipApplications MembershipApplication[] @relation("MembershipBeneficiaryProgram")

  @@unique([category, name])
}

// ---------------------------
// Benefit & MemberBenefit (Program-related benefits assignment to members)
// ---------------------------
model Benefit {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(150)
  description String?
  category    String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? @db.Timestamptz

  // Relations
  assignments MemberBenefit[]

  @@index([deletedAt])
  @@index([category])
}

model MemberBenefit {
  id        Int                  @id @default(autoincrement())
  memberId  Int
  benefitId Int
  status    MemberBenefitStatus
  grantedAt DateTime?
  notes     String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  // Relations
  member  Member  @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  benefit Benefit @relation(fields: [benefitId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([memberId, benefitId])
  @@index([memberId])
  @@index([benefitId])
}

model Activity {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(150)
  description String?   @db.Text
  category    String?   @db.VarChar(100)
  eventDate   DateTime?
  location    String?   @db.VarChar(150)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz

  media ActivityMedia[]

  @@index([category])
  @@index([eventDate])
  @@index([deletedAt])
}

model ActivityMedia {
  id         Int      @id @default(autoincrement())
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  type       String   @db.VarChar(20)
  url        String   @db.VarChar(255)
  caption    String?  @db.VarChar(255)
  order      Int      @default(0)
  uploadedAt DateTime @default(now())

  @@index([activityId])
  @@index([type])
}

// ---------------------------
// Struktur Organisasi & Sayap
// ---------------------------
model SayapType {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  description String?

  strukturOrganisasi StrukturOrganisasi[]
}

model Region {
  id   Int        @id @default(autoincrement())
  name String     @db.VarChar(100)
  type RegionType

  strukturOrganisasi StrukturOrganisasi[]

  @@unique([type, name])
  @@index([type])
  @@index([name])
}

model StrukturOrganisasi {
  id            Int          @id @default(autoincrement())
  level         OrgLevel
  position      PositionEnum
  positionTitle String?      @db.VarChar(255) // Detail posisi lengkap, misal: "Wakil Ketua Bidang Pemenangan Pemilu"
  positionOrder Int?         // Urutan hierarki posisi untuk sorting (1-34 untuk DPD)
  photoUrl      String?      @db.VarChar(255)

  // Optional relasi
  sayapTypeId Int?
  sayapType   SayapType? @relation(fields: [sayapTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  regionId Int?
  region   Region? @relation(fields: [regionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  members Member[]

  @@index([level])
  @@index([position])
  @@index([regionId])
  @@index([sayapTypeId])
  @@index([positionOrder])
}

// ---------------------------
// Keanggotaan
// ---------------------------
model Member {
  id          Int           @id @default(autoincrement())
  fullName    String        @db.VarChar(150)
  email       String?       @db.VarChar(100)
  phone       String?       @db.VarChar(30)
  dateOfBirth DateTime?
  address     String?
  bio         String?
  gender      GenderEnum?
  status      MemberStatus? @default(active)
  photoUrl    String?       @db.VarChar(255)
  ktpPhotoUrl String?       @db.VarChar(255)
  ktaPhotoUrl String?       @db.VarChar(255)

  joinDate  DateTime? @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamptz

  // 🆕 Data administrasi tambahan
  nik               String? @db.VarChar(50)
  ktaNumber         String? @db.VarChar(50)
  occupation        String? @db.VarChar(100)
  familyMemberCount Int?
  maritalStatus     String? @db.VarChar(50)

  strukturId Int?
  struktur   StrukturOrganisasi? @relation(fields: [strukturId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  parentDprtMemberId Int?
  parentDprtMember   Member?  @relation("MemberCadres", fields: [parentDprtMemberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  cadres             Member[] @relation("MemberCadres")

  // Aplikasi keanggotaan
  applications  MembershipApplication[]
  Program       Program[]
  MemberBenefit MemberBenefit[]

  @@index([status])
  @@index([strukturId])
  @@index([parentDprtMemberId])
  @@index([fullName])
  @@index([deletedAt])
}

// ---------------------------
// Penerima Benefit Program (bukan Member)
// ---------------------------
model ProgramBenefitRecipient {
  id Int @id @default(autoincrement())

  // Relasi wajib ke program
  programId Int
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  receivedAt DateTime @default(now())

  fullName          String        @db.VarChar(150)
  email             String?       @db.VarChar(100)
  nik               String?       @db.VarChar(50)
  phone             String?       @db.VarChar(30)
  dateOfBirth       DateTime?
  gender            GenderEnum?
  occupation        String?       @db.VarChar(100)
  familyMemberCount Int?
  proposerName      String?       @db.VarChar(150)
  fullAddress       String?
  notes             String?

  @@unique([programId, nik])
  @@index([programId])
  @@index([nik])
}

// ---------------------------
// Pendaftaran Program Beasiswa PIP
// ---------------------------
enum PipRegistrationStatus {
  pending
  rejected
  accepted
}

enum EducationLevel {
  sd
  smp
  sma
  smk
}

enum SchoolStatus {
  negeri
  swasta
}

enum ProposerStatus {
  dpd
  dpc
  dprt
  kordes
  lainnya
}

enum StudentRelation {
  anak
  saudara
  tetangga
  lainnya
}

model PipRegistration {
  id Int @id @default(autoincrement())

  programId Int
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  submittedAt   DateTime              @default(now())
  reviewedAt    DateTime?
  status        PipRegistrationStatus @default(pending)
  reviewerNotes String?

  // 📚 DATA SISWA
  educationLevel EducationLevel // SD/SMP/SMA/SMK
  studentName    String         @db.VarChar(150)
  birthPlace     String?        @db.VarChar(100)
  dateOfBirth    DateTime?
  gender         GenderEnum?
  nisn           String?        @db.VarChar(50) // Nomor Induk Siswa Nasional
  studentClass   String?        @db.VarChar(50) // Kelas siswa (misal: "10 IPA 1")
  studentPhone   String?        @db.VarChar(30) // Nomor HP/WA siswa

  // 🏫 DATA SEKOLAH
  schoolName     String?        @db.VarChar(200)
  npsn           String?        @db.VarChar(50) // Nomor Pokok Sekolah Nasional
  schoolStatus   SchoolStatus?
  schoolVillage  String?        @db.VarChar(100) // Kelurahan/Desa sekolah
  schoolDistrict String?        @db.VarChar(100) // Kecamatan sekolah
  schoolCity     String?        @db.VarChar(100) // Kabupaten/Kota sekolah
  schoolProvince String?        @db.VarChar(100) // Provinsi sekolah

  // 👨‍👩‍👧 DATA ORANG TUA SISWA
  fatherName               String?  @db.VarChar(150) // Nama Ayah/Wali
  fatherPhone              String?  @db.VarChar(30) // Nomor HP/WA Ayah
  motherName               String?  @db.VarChar(150) // Nama Ibu
  motherPhone              String?  @db.VarChar(30) // Nomor HP/WA Ibu
  parentProvince           String?  @db.VarChar(100) // Provinsi orang tua
  parentCity               String?  @db.VarChar(100) // Kota/Kabupaten orang tua
  parentDistrict           String?  @db.VarChar(100) // Kecamatan orang tua
  parentVillage            String?  @db.VarChar(100) // Desa/Kelurahan orang tua
  parentRtRw               String?  @db.VarChar(20) // RT/RW (format: "001/002")
  parentAddress            String?  @db.Text // Alamat detail (jalan, gang, no rumah)
  parentWillingJoinNasdem  Boolean? @default(false) // Bersedia bergabung di Partai Nasdem
  parentJoinReason         String?  @db.Text // Alasan Bergabung/Tidak Bergabung

  // 📝 DATA PENGUSUL
  proposerName           String?           @db.VarChar(150)
  proposerStatus         ProposerStatus?
  proposerStatusOther    String?           @db.VarChar(100) // Jika status = lainnya
  proposerPhone          String?           @db.VarChar(30)
  proposerAddress        String?           @db.Text
  proposerRelation       StudentRelation?
  proposerRelationOther  String?           @db.VarChar(100) // Jika hubungan = lainnya

  @@index([programId])
  @@index([status])
  @@index([educationLevel])
  @@index([nisn])
}

// ==========================================
// 📝 KIP REGISTRATION MODEL (Kartu Indonesia Pintar)
// ==========================================
model KipRegistration {
  id Int @id @default(autoincrement())

  programId Int
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  submittedAt   DateTime              @default(now())
  reviewedAt    DateTime?
  status        PipRegistrationStatus @default(pending) // Reuse same status enum
  reviewerNotes String?

  // 📚 DATA MAHASISWA
  studentName    String         @db.VarChar(150)
  homeAddress    String?        @db.Text // Alamat Rumah Lengkap
  phoneNumber    String?        @db.VarChar(30) // Nomor HP/WA
  nik            String?        @db.VarChar(50) // NIK
  birthPlace     String?        @db.VarChar(100) // Tempat Lahir
  dateOfBirth    DateTime? // Tanggal Lahir
  gender         GenderEnum?
  nisn           String?        @db.VarChar(50) // NISN (Nomor Induk Siswa Nasional)
  npsn           String?        @db.VarChar(50) // NPSN (Nomor Pokok Sekolah Nasional)
  nim            String?        @db.VarChar(50) // NIM (Nomor Induk Mahasiswa)
  universityName String?        @db.VarChar(200) // Nama Perguruan Tinggi
  universityStatus String?      @db.VarChar(50) // Status PT (Negeri/Swasta)
  studyProgram   String?        @db.VarChar(150) // Program Studi
  yearLevel      String?        @db.VarChar(50) // Tahun Angkatan

  // 👨‍👩‍👧 DATA ORANG TUA SISWA
  fatherName     String?  @db.VarChar(150) // Nama Ayah/Wali
  motherName     String?  @db.VarChar(150) // Nama Ibu
  parentPhone    String?  @db.VarChar(30) // Nomor Hp/WA Orang Tua
  parentAddress  String?  @db.Text // Alamat Orang Tua

  // 📝 DATA PENGUSUL
  proposerName          String?           @db.VarChar(150)
  proposerStatus        ProposerStatus?
  proposerStatusOther   String?           @db.VarChar(100) // Jika status = lainnya
  proposerPhone         String?           @db.VarChar(30) // Nomor HP/WA
  proposerAddress       String?           @db.Text
  proposerRelation      StudentRelation?
  proposerRelationOther String?           @db.VarChar(100) // Jika hubungan = lainnya

  @@index([programId])
  @@index([status])
  @@index([nik])
  @@index([nisn])
  @@index([nim])
}

model MembershipApplication {
  id              Int               @id @default(autoincrement())
  fullName        String            @db.VarChar(150)
  nik             String?           @db.VarChar(50) // NIK (Nomor Induk Kependudukan)
  email           String?           @db.VarChar(100)
  phone           String?           @db.VarChar(30)
  address         String?
  dateOfBirth     DateTime?
  gender          GenderEnum?
  occupation      String?           @db.VarChar(100)
  motivation      String?
  ktpPhotoUrl     String?           @db.VarChar(255) // KTP photo file path
  applicationType ApplicationType
  status          ApplicationStatus @default(pending)
  submittedAt     DateTime          @default(now())
  reviewedAt      DateTime?
  notes           String?
  memberId        Int?
  
  // Beneficiary program relation (optional)
  isBeneficiary         Boolean @default(false)
  beneficiaryProgramId  Int?
  beneficiaryProgram    Program? @relation("MembershipBeneficiaryProgram", fields: [beneficiaryProgramId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  member Member? @relation(fields: [memberId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([applicationType])
  @@index([status])
  @@index([submittedAt])
  @@index([memberId])
  @@index([nik])
  @@index([beneficiaryProgramId])
}

// ---------------------------
// Entity Pemilu DPRD
// ---------------------------
model Caleg {
  id       Int     @id @default(autoincrement())
  fullName String  @db.VarChar(150)
  photoUrl String? @db.VarChar(255)

  partyId Int
  party   Party @relation(fields: [partyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  dprdCalegResults DprdCalegResult[]

  @@unique([partyId, fullName])
  @@index([partyId])
  @@index([fullName])
}

model Dapil {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  kecamatan            Kecamatan[]
  DprdElectionAnalysis DprdElectionAnalysis[]

  @@unique([name])
}

model Kecamatan {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  dapilId Int
  dapil   Dapil @relation(fields: [dapilId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  desa     Desa[]
  analyses DprdElectionAnalysis[]

  @@unique([dapilId, name])
  @@index([dapilId])
  @@index([name])
}

model Desa {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  kecamatanId Int
  kecamatan   Kecamatan @relation(fields: [kecamatanId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  tps      Tps[]
  analyses DprdElectionAnalysis[]

  @@unique([kecamatanId, name])
  @@index([kecamatanId])
  @@index([name])
}

model Tps {
  id     Int    @id @default(autoincrement())
  number String @db.VarChar(20)

  desaId Int
  desa   Desa @relation(fields: [desaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  analyses DprdElectionAnalysis[]

  @@unique([desaId, number])
  @@index([desaId])
  @@index([number])
}

// ---------------------------
// Analisis & Hasil DPRD
// ---------------------------
model DprdElectionAnalysis {
  id              Int      @id @default(autoincrement())
  year            Int
  totalValidVotes Int?
  invalidVotes    Int?
  dpt             Int?
  dptb            Int?
  dpk             Int?
  totalVotes      Int?
  turnoutPercent  Decimal? @db.Decimal(5, 2)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Hirarki wilayah (opsional per level, tapi minimal tpsId umumnya terisi)
  dapilId Int?
  dapil   Dapil? @relation(fields: [dapilId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  kecamatanId Int?
  kecamatan   Kecamatan? @relation(fields: [kecamatanId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  desaId Int?
  desa   Desa? @relation(fields: [desaId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  tpsId Int?
  tps   Tps? @relation(fields: [tpsId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Relations
  partyResults DprdPartyResult[]
  calegResults DprdCalegResult[]

  @@unique([year, tpsId])
  @@index([year])
  @@index([dapilId])
  @@index([kecamatanId])
  @@index([desaId])
  @@index([tpsId])
}

model DprdPartyResult {
  id    Int  @id @default(autoincrement())
  votes Int?

  electionAnalysisId Int
  electionAnalysis   DprdElectionAnalysis @relation(fields: [electionAnalysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  partyId Int
  party   Party @relation(fields: [partyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([electionAnalysisId, partyId])
  @@index([electionAnalysisId])
  @@index([partyId])
}

model DprdCalegResult {
  id    Int  @id @default(autoincrement())
  votes Int?

  electionAnalysisId Int
  electionAnalysis   DprdElectionAnalysis @relation(fields: [electionAnalysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  calegId Int
  caleg   Caleg @relation(fields: [calegId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([electionAnalysisId, calegId])
  @@index([electionAnalysisId])
  @@index([calegId])
}
