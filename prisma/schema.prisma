generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  superadmin
  editor
  analyst
}

enum OrgLevel {
  dpd
  sayap
  dpc
  dprt
  kader
}

enum MemberStatus {
  active
  inactive
  suspended
}

enum PositionEnum {
  ketua
  sekretaris
  bendahara
  wakil
  anggota
}

enum RegionType {
  kabupaten
  kecamatan
  desa
}

enum GenderEnum {
  male
  female
}

enum ElectionType {
  dprd
}

enum GalleryType {
  photo
  video
}

// Ganti Gallery agar cocok dengan API (type,url,caption,uploadDate)
model Gallery {
  id         Int         @id @default(autoincrement())
  type       GalleryType
  url        String
  caption    String?
  uploadDate DateTime?
  userId     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  User       User        @relation(fields: [userId], references: [id])

  @@index([uploadDate])
}

// Tambahkan relasi hirarki geo sesuai API
model Dapil {
  id        Int                    @id @default(autoincrement())
  name      String
  Kecamatan Kecamatan[]
  // tetap hubungan ke analisis kalau dipakai
  analyses  DprdElectionAnalysis[]

  @@index([name])
}

model Kecamatan {
  id       Int                    @id @default(autoincrement())
  name     String
  dapilId  Int
  Dapil    Dapil                  @relation(fields: [dapilId], references: [id])
  Desa     Desa[]
  analyses DprdElectionAnalysis[]

  @@index([dapilId])
  @@index([name])
}

model Desa {
  id          Int                    @id @default(autoincrement())
  name        String
  kecamatanId Int
  Kecamatan   Kecamatan              @relation(fields: [kecamatanId], references: [id])
  Tps         Tps[]
  analyses    DprdElectionAnalysis[]

  @@index([kecamatanId])
  @@index([name])
}

model Tps {
  id       Int                    @id @default(autoincrement())
  number   Int
  desaId   Int
  Desa     Desa                   @relation(fields: [desaId], references: [id])
  analyses DprdElectionAnalysis[]

  @@unique([desaId, number])
  @@index([desaId])
}

model User {
  id        Int       @id @default(autoincrement())
  username  String
  email     String    @unique
  password  String
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  News      News[]
  Program   Program[]
  Gallery   Gallery[]
}

model Party {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  abbreviation    String?
  logoUrl         String?
  Caleg           Caleg[]
  DprdPartyResult DprdPartyResult[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  subtitle    String?
  description String?
  iconUrl     String?
  Program     Program[]
}

model News {
  id           Int       @id @default(autoincrement())
  title        String
  content      String?
  publishDate  DateTime?
  thumbnailUrl String?
  userId       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([publishDate])
}

model Program {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  categoryId  Int
  photoUrl    String?
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Category    Category  @relation(fields: [categoryId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@index([categoryId])
  @@index([userId])
  @@index([startDate])
  @@index([endDate])
}

// Optimasi struktur organisasi (filter umum: level, position, region, sayap)
model StrukturOrganisasi {
  id          Int          @id @default(autoincrement())
  level       OrgLevel
  position    PositionEnum
  sayapTypeId Int?
  regionId    Int?
  photoUrl    String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  SayapType   SayapType?   @relation(fields: [sayapTypeId], references: [id], onDelete: SetNull)
  Region      Region?      @relation(fields: [regionId], references: [id], onDelete: SetNull)
  Member      Member[]

  @@index([level, position])
  @@index([regionId])
  @@index([sayapTypeId])
  @@index([level, regionId])
  @@index([startDate])
}

model Region {
  id                 Int                  @id @default(autoincrement())
  name               String
  type               RegionType
  StrukturOrganisasi StrukturOrganisasi[]

  @@unique([name, type])
  @@index([type])
}

// SayapType: nama unik
model SayapType {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  description        String?
  StrukturOrganisasi StrukturOrganisasi[]
}

model Caleg {
  id      Int               @id @default(autoincrement())
  name    String
  partyId Int
  Party   Party             @relation(fields: [partyId], references: [id])
  results DprdCalegResult[]

  @@index([partyId])
  @@index([name])
}

// dprd-party-results & dprd-caleg-results: konsisten pakai analysisId (ubah API)
model DprdPartyResult {
  id         Int                  @id @default(autoincrement())
  analysisId Int
  partyId    Int
  votes      Int?
  analysis   DprdElectionAnalysis @relation(fields: [analysisId], references: [id])
  Party      Party                @relation(fields: [partyId], references: [id])

  @@index([analysisId])
  @@index([partyId])
}

model DprdCalegResult {
  id         Int                  @id @default(autoincrement())
  analysisId Int
  calegId    Int
  votes      Int?
  analysis   DprdElectionAnalysis @relation(fields: [analysisId], references: [id])
  Caleg      Caleg                @relation(fields: [calegId], references: [id])

  @@index([analysisId])
  @@index([calegId])
}

// Update relasi pada DprdElectionAnalysis (pastikan nama field sesuai):
model DprdElectionAnalysis {
  id              Int               @id @default(autoincrement())
  year            Int
  dapilId         Int
  kecamatanId     Int
  desaId          Int
  tpsId           Int
  totalValidVotes Int?
  invalidVotes    Int?
  dpt             Int?
  dptb            Int?
  dpk             Int?
  totalVotes      Int?
  turnoutPercent  Float?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  Dapil           Dapil             @relation(fields: [dapilId], references: [id])
  Kecamatan       Kecamatan         @relation(fields: [kecamatanId], references: [id])
  Desa            Desa              @relation(fields: [desaId], references: [id])
  Tps             Tps               @relation(fields: [tpsId], references: [id])
  DprdPartyResult DprdPartyResult[]
  DprdCalegResult DprdCalegResult[]

  @@index([year])
  @@index([dapilId, year])
  @@index([kecamatanId, year])
  @@index([desaId, year])
  @@index([tpsId, year])
  @@index([dapilId, kecamatanId, desaId, tpsId, year])
}

model Member {
  id                 Int                 @id @default(autoincrement())
  fullName           String
  email              String?             @unique
  phone              String?
  dateOfBirth        DateTime?
  address            String?
  bio                String?
  gender             GenderEnum?
  status             MemberStatus        @default(active)
  userId             Int?
  strukturId         Int?
  photoUrl           String?
  joinDate           DateTime?
  endDate            DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  StrukturOrganisasi StrukturOrganisasi? @relation(fields: [strukturId], references: [id], onDelete: SetNull)

  @@index([status, joinDate])
  @@index([strukturId])
  @@index([fullName])
  @@index([status])
  @@index([gender])
  @@index([joinDate])
}
